import { timestamp, varchar } from "drizzle-orm/pg-core";
import { ulid } from "ulid";
import { Brand } from "../utils/brand";

// Generates a prefixed ulid for example usr_[ulid]
export const generatePrefixedUlid = (prefix: string) =>
  `${prefix}_${ulid(new Date().getTime()).toLowerCase()}`;

// is the drizzle type for autogenerated ulid we can just use it on id with the prefix
export const prefixedUlid = (prefix: string) =>
  varchar("id")
    .unique()
    .primaryKey()
    .$default(() => generatePrefixedUlid(prefix));

// createdAt and updatedAt so I can just spread defaultTimestamps in the model
export const defaultTimestamps = {
  createdAt: timestamp("createdAt").defaultNow().notNull(),
  updatedAt: timestamp("updatedAt").defaultNow().notNull(),
};

// TODO: Add error message to the translation file. I'll do it sometime
// Extracts the non prefixed version of the ulid for example for usr_[ulid]
export const extractNonPrefixedUlid = <T extends string = string>(
  prefixedUlid: string | T,
  prefix: string,
) => {
  if (!prefixedUlid.includes(prefix))
    throw new Error(
      "The provided prefix is not part of the id, please make sure you provide the propper prefix for the provided id.",
    );

  return prefixedUlid.split(`${prefix}_`)[1];
};

// A builder for isValid function that tests if the id is prefixed with the propper prefix.
// Will be used in zod input schemas to check if an id has the propper prefix
export const buildIsValidFunc =
  <T extends string = string>(prefix: string) =>
  (id: string | T): boolean =>
    id.slice(0, prefix.length) === prefix;

// A generic type that returns a branded id type with a prefix. T corresponds to the prefix
export type BrandedID<T extends string = string> = Brand<string, T>;

// Zod superRefine function that makes sure you have at least one of the fields there
export const atLeastOneDefined = (
  obj: Record<string | number | symbol, unknown>,
) => Object.values(obj).some((v) => v !== undefined);
